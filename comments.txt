TO DO

Attribute name for AttachedFile model

Pagination controls


DONE

Test 

    help text for description

Table header link

Archivo adjunto

    Created at
    Paciente
    Archivo

    Muestra lista y añadir

add AttachedFileInline to Patient

PatientDiagnosis

    patient
    created_at
    diagnosis

Add patient str in card header

tabular inline for patient_diagnosis in patient

Delete confirmation dialog

ELIMINAR with danger outline class

LOGIN MINUSCULA

dotenv

Remove useless elements

Organize sidebar

messages

Patient list is not displayed in a single page, issue with 0

include headers inside panes

date format

Table with diagnosis options

Translated models and add unique names to the fields so they won't be miss recognized

Validate patient form:
    This might require to get a list of inputs with more than the ones from the patient form

Finish Backend:
    create patient   GET POST redirect user to patient list page
    update patient   GET POST
    list patient     GET

Front for patient list

display submit button after fetch

Submit button should execute a function which validates all fields to be sent
so the form wont be rejected. If one of them isn't valid it should point the 
user to that specific section and highlight the invalid input.

Finish evolution section and go on to tests

Specify a height for the patient form 

Fetch for diagnosis as well as selecting and adding in diagnosis options


OTHER


Change diagnosis_form for patient_diagnosis_form

create PatientDiagnosisForm

    add django_patient_diagnosis_form

    then JS

list of patient_diagnoses

form.html

    home page 

    form page

JavaScript

    Submit button should take into account the new class 

    displayer and hider




patient_form
patient_diagnosis_form
evolution_form
patient_test_form
evolution_records
patient_diagnoses
patient_tests

diagnosis_form
test_form

diagnosis form page




file = request.FILES.get('file')
        print(file)
        
        complete_data = {
                **request.POST,
                **request.FILES,
                **{'patient': Patient.objects.first()}
            }
        print(complete_data)


def file_test(request):
    if request.method == 'POST':
        attached_file_form = AttachedFileForm(request.POST, request.FILES)
        if attached_file_form.is_valid():
            attached_file_form.save()
            return redirect('home:patients')
        else:
            return HttpResponse(attached_file_form.errors.as_json())
    if request.method == 'GET':
        return render(request, 'home/file.html', {'form': AttachedFileForm()})

class AttachedFile(models.Model):
    patient = models.ForeignKey(Patient, models.CASCADE, verbose_name='paciente')
    
    def get_patient_directory_path(instance, filename):
        # instance.name = filename
        return f"paciente_{instance.patient.cedula}/{filename}"
    
    file = models.FileField('documento', upload_to=get_patient_directory_path)
    create_at = models.DateField('fecha de adición', auto_now_add=True)
    
    class Meta:
        verbose_name = 'documento adjunto'
        verbose_name_plural = 'documentos adjuntos'